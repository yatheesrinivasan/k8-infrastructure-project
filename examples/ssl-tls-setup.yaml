# SSL/TLS Certificate Management with Cert-Manager

# Step 1: Install Cert-Manager
# kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml

---
# Let's Encrypt ClusterIssuer for Production
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # Production Let's Encrypt server
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email for certificate expiration notifications
    email: your-email@company.com
    # Private key for ACME account
    privateKeySecretRef:
      name: letsencrypt-prod-private-key
    # HTTP01 challenge solver
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux

---
# Let's Encrypt ClusterIssuer for Staging (testing)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # Staging Let's Encrypt server (for testing)
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: your-email@company.com
    privateKeySecretRef:
      name: letsencrypt-staging-private-key
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Alternative: Custom CA Certificate (for internal domains)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: custom-ca-issuer
spec:
  ca:
    secretName: custom-ca-secret  # Your custom CA certificate

---
# Certificate Resource (Auto-generated by Ingress annotations)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: secure-web-app-tls
  namespace: production
spec:
  secretName: secure-web-app-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - myapp.yourdomain.com
  - www.myapp.yourdomain.com